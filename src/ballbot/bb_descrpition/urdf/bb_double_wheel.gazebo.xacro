<?xml version="1.0" encoding="UTF-8"?>
<robot xmlns:xacro="http://ros.org/wiki/xacro">
   <xacro:arg name="motors_controller_type" default="EffortJointInterface" />
   <xacro:arg name="imu_update_rate" default="100" />
   <xacro:arg name="control_period" default="0.01" />
   <xacro:arg name="laser_visual" default="False" /> <!-- If this is true only in gazebo the lds scanner is visualized in blue! -->
   <xacro:arg name="ground_truth" default="False" />

    <!-- not used yet: -->
   <xacro:arg name="imu_visual" default="False" />
   <xacro:arg name="use_diff_drive" default="False" />


   <!-- controllers: -->
   <gazebo>
      <!--Plugin loads hardware interfaces and controller manager -->
      <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
         <robotNamespace>/$(arg robot_name)/joints</robotNamespace>
         <robotParam>/$(arg robot_name)/robot_description</robotParam>
         <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
         <controlPeriod>$(arg control_period)</controlPeriod>
         <!-- 100Hz means 0.01 control Period -->
      </plugin>
   </gazebo>


   <!--   The <transmission> element is used to link actuators to joints
          Without a transmission link there is no tf published!
    -->
   <transmission name="wheel1_joint_transmission">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="wheel1_joint">
         <hardwareInterface>hardware_interface/$(arg motors_controller_type)</hardwareInterface>
      </joint>
      <actuator name="wheel1_joint_actuator">
         <hardwareInterface>hardware_interface/$(arg motors_controller_type)</hardwareInterface>
         <mechanicalReduction>1</mechanicalReduction>
      </actuator>
   </transmission>

   <transmission name="wheel2_joint_transmission">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="wheel2_joint">
         <hardwareInterface>hardware_interface/$(arg motors_controller_type)</hardwareInterface>
      </joint>
      <actuator name="wheel2_joint_actuator">
         <hardwareInterface>hardware_interface/$(arg motors_controller_type)</hardwareInterface>
         <mechanicalReduction>1</mechanicalReduction>
      </actuator>
   </transmission>

   <transmission name="wheel3_joint_transmission">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="wheel3_joint">
         <hardwareInterface>hardware_interface/$(arg motors_controller_type)</hardwareInterface>
      </joint>
      <actuator name="wheel3_joint_actuator">
         <hardwareInterface>hardware_interface/$(arg motors_controller_type)</hardwareInterface>
         <mechanicalReduction>1</mechanicalReduction>
      </actuator>
   </transmission>


   <!-- subwheels transmission links: required for tf-->
   <xacro:macro name="transmission_subwheel_macro" params="pos orient">
      <transmission name="subwheel${pos}_${orient}_joint_transmission">
         <type>transmission_interface/SimpleTransmission</type>
         <joint name="subwheel${pos}_${orient}_joint">
            <hardwareInterface>hardware_interface/$(arg motors_controller_type)</hardwareInterface>
         </joint>
         <actuator name="subwheel${pos}_${orient}_joint_actuator">
            <hardwareInterface>hardware_interface/$(arg motors_controller_type)</hardwareInterface>
            <mechanicalReduction>1</mechanicalReduction>
         </actuator>
      </transmission>
   </xacro:macro>

   <xacro:macro name="transmission_subwheel_pos_macro" params="pos">
      <xacro:transmission_subwheel_macro pos="${pos}" orient="1_in" />
      <xacro:transmission_subwheel_macro pos="${pos}" orient="2_in" />
      <xacro:transmission_subwheel_macro pos="${pos}" orient="3_in" />
      <xacro:transmission_subwheel_macro pos="${pos}" orient="4_in" />
      <xacro:transmission_subwheel_macro pos="${pos}" orient="5_in" />

      <xacro:transmission_subwheel_macro pos="${pos}" orient="1_out" />
      <xacro:transmission_subwheel_macro pos="${pos}" orient="2_out" />
      <xacro:transmission_subwheel_macro pos="${pos}" orient="3_out" />
      <xacro:transmission_subwheel_macro pos="${pos}" orient="4_out" />
      <xacro:transmission_subwheel_macro pos="${pos}" orient="5_out" />
   </xacro:macro>

   <!-- subwheels transmission's are not required or?
   In case you  are not interested in the tf's of them visualized in rviz gnerate them!-->
   <!-- generate subwheel transmission links: -->
   <xacro:transmission_subwheel_pos_macro pos="1">
   </xacro:transmission_subwheel_pos_macro>

   <xacro:transmission_subwheel_pos_macro pos="2">
   </xacro:transmission_subwheel_pos_macro>

   <xacro:transmission_subwheel_pos_macro pos="3">
   </xacro:transmission_subwheel_pos_macro>


   <!-- p3d plugin (3D Position Interface for Ground Truth) -->
   <xacro:if value="$(arg ground_truth)">
      <gazebo>
         <plugin name="ground_truth" filename="libgazebo_ros_p3d.so">
            <frameName>world</frameName>
            <bodyName>base_footprint</bodyName>
            <topicName>/gazebo/$(arg robot_name)/odom</topicName>
            <updateRate>10.0</updateRate> <!-- not sure why but if you set this value low ball is not so often jumping into the origin (in rviz) -->
         </plugin>
      </gazebo>
   </xacro:if>


   <!-- links: http://gazebosim.org/tutorials/?tut=ros_urdf-->
   <!--no multiple physics engines through urdf?!  -->
   <!--http://answers.gazebosim.org/question/14384/changing-physics-engine-through-urdf/-->
   <!--https://answers.ros.org/question/51956/simple-question-on-setting-bounce-properties-urdf/-->
   <gazebo reference="body_link">
      <!-- shortforms:-->
      <gravity>1</gravity>
      <maxVel>0.01</maxVel>
      <minDepth>0</minDepth>
      <mu1>0.0</mu1>
      <mu2>0.0</mu2>
      <fdir1>0 0 0</fdir1>
      <kp>1e+13</kp>
      <kd>1.0</kd>
      <selfCollide>0</selfCollide>
      <maxContacts>10</maxContacts>
      <laserRetro>0</laserRetro>
      <material>Gazebo/DarkGrey</material>
   </gazebo>

  <gazebo reference="camera_mount_link">
      <material>Gazebo/DarkGrey</material>
  </gazebo>

<!-- do i need this for ground friction?! -->
<gazebo reference="base_footprint">
   <mu1>1e+3</mu1>
   <mu2>1e+3</mu2>
   <material>Gazebo/Green</material>
</gazebo>

   <!-- main wheels:
mu: Friction coefficients Î¼ for the principal contact directions along the contact surface
kp: Contact stiffness for rigid body contacts  (Steifigkeit)
kd: Contact damping k_d for rigid body contacts

mu of speichen_wheel actually does not matter cause it has no contact point!
-->
   <xacro:macro name="wheel" params="pos">
      <gazebo reference="wheel${pos}_link">
         <mu1>0</mu1>
         <mu2>0</mu2>
         <kp>1e+13</kp>
         <kd>1.0</kd>
         <minDepth>0.001</minDepth>
         <maxVel>0.1</maxVel>
         <fdir1>1 0 0</fdir1>
         <material>Gazebo/Grey</material>
      </gazebo>
   </xacro:macro>

   <!-- generate wheels: -->
   <xacro:wheel pos="1" />
   <xacro:wheel pos="2" />
   <xacro:wheel pos="3" />


   <!-- subwheels: -->
   <xacro:macro name="subwheel_params" params="suffix">
      <gazebo reference="subwheel${suffix}_link">
         <mu1>1e+3</mu1>
         <mu2>1e+3</mu2>
         <kp>5e+5</kp>
         <kd>10.0</kd>
         <minDepth>0.001</minDepth>
         <maxVel>0.1</maxVel>
         <fdir1>1 0 0</fdir1>
         <material>Gazebo/DarkGrey</material>
      </gazebo>
   </xacro:macro>


   <xacro:macro name="subwheel" params="pos">
      <xacro:subwheel_params suffix="${pos}_1_out" />
      <xacro:subwheel_params suffix="${pos}_2_out" />
      <xacro:subwheel_params suffix="${pos}_3_out" />
      <xacro:subwheel_params suffix="${pos}_4_out" />
      <xacro:subwheel_params suffix="${pos}_5_out" />
      <xacro:subwheel_params suffix="${pos}_1_in" />
      <xacro:subwheel_params suffix="${pos}_2_in" />
      <xacro:subwheel_params suffix="${pos}_3_in" />
      <xacro:subwheel_params suffix="${pos}_4_in" />
      <xacro:subwheel_params suffix="${pos}_5_in" />
   </xacro:macro>


   <!-- generate subwheels -->
   <xacro:subwheel pos="1" />
   <xacro:subwheel pos="2" />
   <xacro:subwheel pos="3" />


   <!-- sensor links here! -->
   <gazebo reference="imu_link">
      <sensor name="imu" type="imu">
         <imu />
         <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
            <robotNamespace />
            <frameName>imu_link</frameName>
            <topicName>/$(arg robot_name)/sensor/imu</topicName>
            <updateRateHZ>$(arg imu_update_rate)</updateRateHZ>
            <gaussianNoise>0.00</gaussianNoise> <!-- was before: 0.001 -->
            <xyzOffset>0.0 0.0 0.0</xyzOffset>
            <rpyOffset>0.0 0.0 0.0</rpyOffset>
         </plugin>
      </sensor>
   </gazebo>


<gazebo reference="base_scan">
  <material>Gazebo/DarkGrey</material>
  <sensor type="ray" name="lds_lfcd_sensor">
    <pose>0 0 0 0 0 0</pose>
    <visualize>$(arg laser_visual)</visualize>
    <update_rate>5</update_rate>
    <ray>
      <scan>
        <horizontal>
          <samples>360</samples>
          <resolution>1</resolution>
          <min_angle>0.0</min_angle>
          <max_angle>6.28</max_angle>
        </horizontal>
      </scan>
      <range>
        <min>0.120</min>
        <max>3.5</max>
        <resolution>0.015</resolution>
      </range>
      <noise>
        <type>gaussian</type>
        <mean>0.0</mean>
        <stddev>0.01</stddev>
      </noise>
    </ray>
    <plugin name="gazebo_ros_lds_lfcd_controller" filename="libgazebo_ros_laser.so">
      <robotNamespace>/$(arg robot_name)/sensor</robotNamespace>
      <topicName>scan_raw</topicName>
      <frameName>base_scan</frameName>
    </plugin>
  </sensor>
</gazebo>


   <!-- real sense stuff in realsense_camera.urdf.xacro -->
   <!-- https://answers.ros.org/question/12430/modelling-sensorsimu-in-gazebo/ libgazebo_ros_imu.so-->
</robot>

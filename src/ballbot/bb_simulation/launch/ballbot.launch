<?xml version="1.0" encoding="UTF-8"?>
<launch>
   <!-- use additional tools: -->
   <arg name="start_rviz" default="False"/>
   <arg name="start_rqt_multiplot" default="False"/>
   <arg name="start_plotjuggler" default="True"/>
   <arg name="start_rqt_gui" default="False"/>

   <!-- choose sensors to be used: -->
   <arg name="use_realsense" default="False"/>
   <arg name="use_laser" default="False"/>

   <arg name="robot_name" default="ballbot" />
   <arg name="ball_name" default="ball" />
   <arg name="use_the_ball" default="True" /> <!-- If wheel_type_single: a ball of 400g and 0.7m diameter is loaded, If wheel_type_double: a ball of 326g and 160mm diameter is loaded -->
   <arg name="controller_type" default="2D" /> <!-- 2D, 3D, drive -->
   <arg name="motors_controller_type" default="EffortJointInterface" />    <!-- PositionJointInterface, VelocityJointInterface, EffortJointInterface -->
   <arg name="wheel_type_single" default="False" /> <!-- Single(True), Double(False), caution the orientation of the two model's is different! this means beta is different -->

   <arg name="imu_update_rate" default="200" /> <!-- update IMU this fast in Hz! -->
   <arg name="control_period" default="0.001" /> <!-- 0.01 = 100Hz controller messages(joint) come all ... secs. should be same as update period?!-->
   <arg name="ground_truth" default="True" />

   <!-- If you wanna use a different gazebo physics engine: -->
   <!-- <arg name="verbose" default="-e bullet"/> -->

   <!--  Robots start position:-->
   <arg name="robot_x_pos" default="0.0" />
   <arg name="robot_y_pos" default="0.0" />
   <arg name="robot_z_pos" default="0.0" />

   <!--  Robots start position:-->
   <arg name="ball_x_pos" default="0.0" />
   <arg name="ball_y_pos" default="0.0" />
   <arg name="ball_z_pos" default="0.080" /> <!-- at least the 326g. (Yellow real ball) has a diameter of 160mm otherwise it would start in the 0 point!-->


   <!-- start Gazebo -->
   <!-- rosservice call unpause gazebo: rosservice call gazebo/unpause_physics -->
   <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="world_name" value="$(find ballbot_gazebo)/worlds/empty.world" />
      <arg name="paused" value="True" />
      <arg name="use_sim_time" value="True" /> <!-- Tells ROS nodes asking for time to get the Gazebo-published simulation time, published over the ROS topic /clock (default true) -->
      <arg name="gui" value="True" />
      <arg name="headless" value="False" />
      <arg name="debug" value="False" />
   </include>

   <group ns="$(arg robot_name)">

      <!-- load robot_description -->
      <include file="$(find ballbot_description)/launch/bb_description.launch">
         <arg name="robot_name" value="$(arg robot_name)" />
         <arg name="ground_truth" value="$(arg ground_truth)" />
         <arg name="motors_controller_type" value="$(arg motors_controller_type)" />
         <arg name="wheel_type_single" value="$(arg wheel_type_single)" />
         <arg name="imu_update_rate" value="$(arg imu_update_rate)"/>
         <arg name="control_period" value="$(arg control_period)"/>
         <arg name="use_realsense" value="$(arg use_realsense)"/>
         <arg name="use_laser" value="$(arg use_laser)"/>
      </include>

      <!-- robot spawner -->
      <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg robot_name) -param robot_description -x $(arg robot_x_pos)   -y $(arg robot_y_pos) -z $(arg robot_z_pos)" />

      <!-- load controllers -->
      <group ns="joints">
         <!-- HACK: Load the URDF into the ROS Parameter Server at gazebo controller
         namespace due to a bug in controller spawner
         TODO - Do I need this hack? -->
         <include file="$(find ballbot_description)/launch/bb_description.launch">
            <arg name="robot_name" value="$(arg robot_name)" />
            <arg name="ground_truth" value="$(arg ground_truth)" />
            <arg name="motors_controller_type" value="$(arg motors_controller_type)" />
            <arg name="wheel_type_single" value="$(arg wheel_type_single)" />
            <arg name="imu_update_rate" value="$(arg imu_update_rate)"/>
            <arg name="control_period" value="$(arg control_period)"/>
            <arg name="use_realsense" value="$(arg use_realsense)"/>
            <arg name="use_laser" value="$(arg use_laser)"/>
         </include>

         <include file="$(find ballbot_gazebo)/launch/start_wheel_controllers.launch">
             <arg name="motors_controller_type" value="$(arg motors_controller_type)" />
         </include>

          <!-- -->
         <include file="$(find ballbot_gazebo)/launch/start_joint_state_controller.launch">
           <arg name="publish_rate" value="100"/>
         </include>
      </group>

      <!-- tf publisher -->
      <remap from="joint_states" to="joints/joint_states" />
      <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
         <param name="tf_prefix" type="string" value="$(arg robot_name)" if="False" /> <!-- False use no multi_robot -->
      </node>
   </group>

    <!-- transform ground truth pose to tf -> for world transformation required for rviz tf-->
    <node name="odom_to_tf_robot" pkg="message_to_tf" type="message_to_tf">
      <param name="odometry_topic" type="string" value="/gazebo/$(arg robot_name)/odom" />
      <param name="child_frame_id" type="string" value="base_footprint" />
    </node>

   <!-- load ball description: -->
   <group ns="$(arg ball_name)" if="$(arg use_the_ball)">
      <include file="$(find ballbot_description)/launch/ball_description.launch">
         <arg name="ball_name" value="$(arg ball_name)" />
         <arg name="wheel_type_single" value="$(arg wheel_type_single)"/>
      </include>
   <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg ball_name) -param robot_description -x $(arg ball_x_pos) -y $(arg ball_y_pos) -z $(arg ball_z_pos)" />
  </group>

    <!-- transform ground truth pose to tf -> for world transformation FOR THE BALL required for rviz tf -->
    <node name="odom_to_tf_ball" pkg="message_to_tf" type="message_to_tf">
      <param name="odometry_topic" type="string" value="/gazebo/$(arg ball_name)/odom" />
      <param name="child_frame_id" type="string" value="ball_link" />
    </node>




<!-- real sense: tf publisher:
<include file="$(find ballbot_gazebo)/launch/start_realsense_tf_publisher.launch" />
-->

<!-- start additional tool's: -->
<group if="$(arg start_rviz)">
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find ballbot_description)/rviz/model.rviz"/>
</group>

<group if="$(arg start_rqt_multiplot)">
  <node pkg="rqt_multiplot" type="rqt_multiplot" name="rqt_multiplot" args=""/>
</group>

<group if="$(arg start_plotjuggler)"> <!--  -l $(find ballbot_description)/rviz/plot_juggler_layout.xml -->
 <node pkg="plotjuggler" type="PlotJuggler" name="my_plot_Juggler" args="" />
</group>

<group if="$(arg start_rqt_gui)">   <!-- start rqt: rosrun rqt_gui rqt_gui   if starts to fast just click blue refresh button! -->
  <node name="ballbot_rqt" pkg="rqt_gui" type="rqt_gui" respawn="false" output="screen" args="-perspective-file $(find ballbot_description)/rviz/bb_rqt.perspective"/>
</group>

</launch>

